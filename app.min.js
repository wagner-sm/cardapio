// CARD√ÅPIO DIGITAL OTIMIZADO - Performance Enhanced (FORMATA√á√ÉO WHATSAPP)
class MenuApp {
    constructor() {
        this.CORS_PROXY = 'https://api.allorigins.win/raw?url=';
        this.CACHE_DURATION = 5 * 60 * 1000; // 5 minutos
        this.CACHE_VERSION = '1.0';

        // URLs das planilhas - SUBSTITUA PELAS SUAS URLs
        this.SHEETS_URLS = {
            items: 'https://docs.google.com/spreadsheets/d/e/2PACX-1vSdo_a3BcS2mEyF7A595xgXVB2hQbSL_XQ8SLhXA6cmkCyt2I05eRldf6wDeRND7TDizORSFYsiQrdj/pub?gid=1746857403&single=true&output=csv',
            categories: 'https://docs.google.com/spreadsheets/d/e/2PACX-1vSdo_a3BcS2mEyF7A595xgXVB2hQbSL_XQ8SLhXA6cmkCyt2I05eRldf6wDeRND7TDizORSFYsiQrdj/pub?gid=549200017&single=true&output=csv',
            config: 'https://docs.google.com/spreadsheets/d/e/2PACX-1vSdo_a3BcS2mEyF7A595xgXVB2hQbSL_XQ8SLhXA6cmkCyt2I05eRldf6wDeRND7TDizORSFYsiQrdj/pub?gid=1181106320&single=true&output=csv'
        };

        this.allItems = [];
        this.allCategories = [];
        this.config = {};
        this.currentCategory = 'all';
        this.searchTimeout = null;
        this.imageObserver = null;

        this.init();
    }

    // SISTEMA DE CACHE AVAN√áADO
    getCacheKey(type) {
        return `menu_${type}_${this.CACHE_VERSION}`;
    }

    getCachedData(type) {
        try {
            const cached = localStorage.getItem(this.getCacheKey(type));
            if (cached) {
                const data = JSON.parse(cached);
                if (Date.now() - data.timestamp < this.CACHE_DURATION) {
                    console.log(`üì¶ Cache hit para ${type}`);
                    return data.content;
                }
            }
        } catch (error) {
            console.warn('Erro ao ler cache:', error);
        }
        return null;
    }

    setCachedData(type, data) {
        try {
            const cacheData = {
                content: data,
                timestamp: Date.now(),
                version: this.CACHE_VERSION
            };
            localStorage.setItem(this.getCacheKey(type), JSON.stringify(cacheData));
            console.log(`üíæ Cache salvo para ${type}`);
        } catch (error) {
            console.warn('Erro ao salvar cache:', error);
        }
    }

    // FETCH OTIMIZADO COM CACHE E RETRY
    async fetchSheetData(url, type) {
        // Tentar cache primeiro
        const cachedData = this.getCachedData(type);
        if (cachedData) {
            return cachedData;
        }

        console.log(`üåê Buscando dados para ${type}...`);

        const fetchOptions = {
            method: 'GET',
            headers: {
                'Accept': 'text/plain,*/*',
                'Cache-Control': 'no-cache'
            }
        };

        // Tentar m√∫ltiplas estrat√©gias
        const strategies = [
            () => fetch(this.CORS_PROXY + encodeURIComponent(url), fetchOptions),
            () => fetch(url, fetchOptions)
        ];

        for (let i = 0; i < strategies.length; i++) {
            try {
                const response = await strategies[i]();
                if (response.ok) {
                    const text = await response.text();
                    const data = this.parseCSV(text);

                    // Salvar no cache
                    this.setCachedData(type, data);
                    return data;
                }
            } catch (error) {
                console.warn(`Estrat√©gia ${i + 1} falhou:`, error.message);
                if (i === strategies.length - 1) {
                    throw error;
                }
            }
        }

        throw new Error('Todas as estrat√©gias de fetch falharam');
    }

    // PARSER CSV OTIMIZADO
    parseCSV(text) {
        if (!text || !text.trim()) return [];

        const lines = text.split('\n').filter(line => line.trim());
        if (lines.length === 0) return [];

        const headers = this.parseCSVLine(lines[0]).map(h => h.trim().replace(/"/g, ''));
        const data = [];

        for (let i = 1; i < lines.length; i++) {
            if (lines[i].trim()) {
                const values = this.parseCSVLine(lines[i]);
                const obj = {};

                headers.forEach((header, index) => {
                    obj[header] = values[index] ? values[index].trim().replace(/"/g, '') : '';
                });

                data.push(obj);
            }
        }
        return data;
    }

    parseCSVLine(line) {
        const result = [];
        let current = '';
        let inQuotes = false;

        for (let i = 0; i < line.length; i++) {
            const char = line[i];
            if (char === '"') {
                inQuotes = !inQuotes;
            } else if (char === ',' && !inQuotes) {
                result.push(current);
                current = '';
            } else {
                current += char;
            }
        }
        result.push(current);
        return result;
    }

    // FORMATA√á√ÉO DE WHATSAPP - NOVA FUN√á√ÉO
    formatWhatsAppForDisplay(phone) {
        // Remove todos os caracteres n√£o num√©ricos
        const cleanPhone = phone.replace(/\D/g, '');

        // Remove c√≥digo do pa√≠s (55) e DDD se presentes
        let localNumber = cleanPhone;

        // Se come√ßar com 55 (Brasil), remove
        if (localNumber.startsWith('55')) {
            localNumber = localNumber.substring(2);
        }

        // Remove DDD (2 primeiros d√≠gitos ap√≥s c√≥digo do pa√≠s)
        if (localNumber.length >= 10) {
            localNumber = localNumber.substring(2);
        }

        // Formatar como 99999-9999 ou 9999-9999
        if (localNumber.length === 9) {
            return `${localNumber.substring(0, 5)}-${localNumber.substring(5)}`;
        } else if (localNumber.length === 8) {
            return `${localNumber.substring(0, 4)}-${localNumber.substring(4)}`;
        }

        // Se n√£o conseguir formatar, retorna o n√∫mero limpo
        return localNumber;
    }

    formatWhatsAppForLink(phone) {
        // Remove todos os caracteres n√£o num√©ricos
        const cleanPhone = phone.replace(/\D/g, '');

        // Se n√£o come√ßar com 55 (c√≥digo do Brasil), adiciona
        if (!cleanPhone.startsWith('55')) {
            return '55' + cleanPhone;
        }

        return cleanPhone;
    }

    // LAZY LOADING DE IMAGENS
    setupImageObserver() {
        if (!('IntersectionObserver' in window)) {
            // Fallback para navegadores antigos
            return;
        }

        const options = {
            threshold: 0.1,
            rootMargin: '50px'
        };

        this.imageObserver = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const img = entry.target;
                    const src = img.dataset.src;
                    if (src) {
                        img.style.backgroundImage = `url('${src}')`;
                        img.classList.remove('loading');
                        this.imageObserver.unobserve(img);
                    }
                }
            });
        }, options);
    }

    // CARREGAMENTO ASS√çNCRONO OTIMIZADO
    async init() {
        if (!this.checkConfiguration()) return;

        try {
            // Mostrar loading
            this.showLoadingState();

            // Setup do observer de imagens
            this.setupImageObserver();

            // Carregar dados em paralelo com Promise.allSettled
            const loadPromises = [
                this.loadConfig(),
                this.loadCategories(),
                this.loadItems()
            ];

            const results = await Promise.allSettled(loadPromises);

            // Processar resultados
            results.forEach((result, index) => {
                const types = ['config', 'categories', 'items'];
                if (result.status === 'rejected') {
                    console.error(`‚ùå Falha ao carregar ${types[index]}:`, result.reason);
                } else {
                    console.log(`‚úÖ ${types[index]} carregado com sucesso`);
                }
            });

            // Setup de eventos
            this.setupEventListeners();

            console.log('üöÄ App inicializado com sucesso!');

        } catch (error) {
            console.error('üí• Erro na inicializa√ß√£o:', error);
            this.showError('Erro ao carregar o card√°pio. Verifique as URLs das planilhas.');
        }
    }

    showLoadingState() {
        const containers = ['categories', 'menuItems'];
        containers.forEach(id => {
            const el = document.getElementById(id);
            if (el) {
                el.innerHTML = `
                    <div class="loading">
                        <div class="skeleton" style="height: 40px; border-radius: 20px; margin-bottom: 10px;"></div>
                        <div class="skeleton" style="height: 20px; border-radius: 10px; width: 60%;"></div>
                    </div>
                `;
            }
        });
    }

    async loadConfig() {
        const configData = await this.fetchSheetData(this.SHEETS_URLS.config, 'config');
        if (configData.length > 0) {
            this.config = configData[0];
            this.updateConfigUI();
        }
    }

    async loadCategories() {
        this.allCategories = await this.fetchSheetData(this.SHEETS_URLS.categories, 'categories');
        this.renderCategories();
    }

    async loadItems() {
        this.allItems = await this.fetchSheetData(this.SHEETS_URLS.items, 'items');
        this.renderItems();
    }

    // UI UPDATES OTIMIZADAS
    updateConfigUI() {
        const updates = [
            ['companyName', this.config.nome_empresa || 'Meu Restaurante'],
            ['slogan', this.config.slogan || 'Sabor que conquista']
        ];

        updates.forEach(([id, value]) => {
            const el = document.getElementById(id);
            if (el) el.textContent = value;
        });

        // Links otimizados
        this.updateContactLinks();
        this.applyCorporateColors();
    }

    updateContactLinks() {
        // Google Maps
        if (this.config.endereco) {
            const mapsLink = `https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(this.config.endereco)}`;
            this.updateLink('addressLink', mapsLink, this.config.endereco);
        }

        // WhatsApp - FORMATA√á√ÉO ATUALIZADA
        if (this.config.whatsapp) {
            const linkNumber = this.formatWhatsAppForLink(this.config.whatsapp);
            const displayNumber = this.formatWhatsAppForDisplay(this.config.whatsapp);
            const whatsappLink = `https://wa.me/${linkNumber}`;
            this.updateLink('whatsappLink', whatsappLink, displayNumber);
        }

        // Email
        if (this.config.email) {
            this.updateLink('emailLink', `mailto:${this.config.email}`, this.config.email);
        }

        // Redes sociais
        if (this.config.facebook) {
            const facebookLink = document.getElementById('facebookLink');
            if (facebookLink) facebookLink.href = this.config.facebook;
        }
        if (this.config.instagram) {
            const instagramLink = document.getElementById('instagramLink');
            if (instagramLink) instagramLink.href = this.config.instagram;
        }
    }

    updateLink(id, href, text) {
        const link = document.getElementById(id);
        if (link) {
            link.href = href;
            const span = link.querySelector('span:last-child');
            if (span) span.textContent = text;
        }
    }

    applyCorporateColors() {
        if (this.config.cor_primaria) {
            const style = document.createElement('style');
            style.textContent = `
                .search-box:focus, .category-btn:hover, .category-btn.active, .item-price { 
                    border-color: ${this.config.cor_primaria} !important; 
                    background-color: ${this.config.cor_primaria} !important; 
                    color: white !important;
                }
            `;
            document.head.appendChild(style);
        }
    }

    // RENDERIZA√á√ÉO OTIMIZADA
    renderCategories() {
        const container = document.getElementById('categories');
        if (!container) return;

        const fragment = document.createDocumentFragment();

        // Bot√£o "Todos"
        const allBtn = this.createCategoryButton('üçΩÔ∏è Todos', 'all', true);
        fragment.appendChild(allBtn);

        // Categorias filtradas e ordenadas
        this.allCategories
            .filter(cat => cat.disponivel && cat.disponivel.toLowerCase() === 'sim')
            .sort((a, b) => parseInt(a.ordem || 0) - parseInt(b.ordem || 0))
            .forEach(category => {
                const btn = this.createCategoryButton(category.nome, category.nome, false);
                fragment.appendChild(btn);
            });

        container.innerHTML = '';
        container.appendChild(fragment);
    }

    createCategoryButton(text, category, isActive) {
        const btn = document.createElement('div');
        btn.className = `category-btn ${isActive ? 'active' : ''}`;
        btn.textContent = text;
        btn.onclick = () => this.filterByCategory(category, btn);
        return btn;
    }

    renderItems(items = null) {
        const container = document.getElementById('menuItems');
        if (!container) return;

        const itemsToShow = items || this.allItems.filter(item => 
            item.disponivel && item.disponivel.toLowerCase() === 'sim'
        );

        if (itemsToShow.length === 0) {
            container.innerHTML = '<div class="loading">Nenhum item encontrado</div>';
            return;
        }

        // Usar DocumentFragment para melhor performance
        const fragment = document.createDocumentFragment();

        itemsToShow.forEach((item, index) => {
            const itemDiv = this.createMenuItem(item, index);
            fragment.appendChild(itemDiv);
        });

        container.innerHTML = '';
        container.appendChild(fragment);
    }

    createMenuItem(item, index) {
        const itemDiv = document.createElement('div');
        itemDiv.className = 'menu-item';
        itemDiv.style.animationDelay = `${index * 0.1}s`;

        const price = parseFloat(item.preco || 0);
        const formattedPrice = price > 0 ? price.toFixed(2).replace('.', ',') : '0,00';

        const imageHtml = item.foto ? 
            `<div class="item-image loading" data-src="${item.foto}"></div>` : '';

        itemDiv.innerHTML = `
            ${imageHtml}
            <div class="item-content">
                <div class="item-name">${item.nome || 'Item sem nome'}</div>
                <div class="item-description">${item.descricao || ''}</div>
                <div class="item-price">R$ ${formattedPrice}</div>
                ${item.observacao ? `<div class="item-observation">${item.observacao}</div>` : ''}
            </div>
        `;

        // Setup lazy loading para imagem
        if (item.foto && this.imageObserver) {
            const img = itemDiv.querySelector('.item-image');
            if (img) {
                this.imageObserver.observe(img);
            }
        }

        return itemDiv;
    }

    // FILTROS E BUSCA OTIMIZADOS
    filterByCategory(category, buttonElement) {
        this.currentCategory = category;

        // Atualizar bot√µes ativos
        document.querySelectorAll('.category-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        buttonElement.classList.add('active');

        // Filtrar e renderizar
        this.applyFilters();
    }

    applyFilters() {
        const searchBox = document.getElementById('searchBox');
        const searchTerm = searchBox ? searchBox.value.toLowerCase() : '';

        let filteredItems = this.allItems.filter(item => 
            item.disponivel && item.disponivel.toLowerCase() === 'sim'
        );

        // Filtro por categoria
        if (this.currentCategory !== 'all') {
            filteredItems = filteredItems.filter(item => item.categoria === this.currentCategory);
        }

        // Filtro por busca
        if (searchTerm) {
            filteredItems = filteredItems.filter(item => 
                (item.nome && item.nome.toLowerCase().includes(searchTerm)) ||
                (item.descricao && item.descricao.toLowerCase().includes(searchTerm))
            );
        }

        this.renderItems(filteredItems);
    }

    // DEBOUNCED SEARCH
    setupEventListeners() {
        const searchBox = document.getElementById('searchBox');
        if (searchBox) {
            searchBox.addEventListener('input', () => {
                clearTimeout(this.searchTimeout);
                this.searchTimeout = setTimeout(() => {
                    this.applyFilters();
                }, 300);
            });
        }
    }

    // ERROR HANDLING
    showError(message) {
        const containers = ['categories', 'menuItems'];
        containers.forEach(containerId => {
            const container = document.getElementById(containerId);
            if (container) {
                container.innerHTML = `
                    <div class="error">
                        ‚ö†Ô∏è ${message}
                        <br><br>
                        <strong>Poss√≠veis solu√ß√µes:</strong><br>
                        1. Verifique se as URLs est√£o no formato correto<br>
                        2. Confirme se a planilha est√° publicada na web<br>
                        3. Teste as URLs no navegador<br>
                        4. Aguarde alguns minutos e tente novamente
                    </div>
                `;
            }
        });
    }

    checkConfiguration() {
        const hasValidUrls = Object.values(this.SHEETS_URLS).every(url => 
            url && !url.includes('COLE_AQUI_A_URL')
        );

        if (!hasValidUrls) {
            this.showError('URLs das planilhas n√£o configuradas. Edite o arquivo HTML e cole as URLs corretas.');
            return false;
        }
        return true;
    }
}

// INICIALIZA√á√ÉO OTIMIZADA
document.addEventListener('DOMContentLoaded', () => {
    // Preload cr√≠tico
    if ('requestIdleCallback' in window) {
        requestIdleCallback(() => {
            new MenuApp();
        });
    } else {
        setTimeout(() => {
            new MenuApp();
        }, 1);
    }
});

// SERVICE WORKER PARA CACHE OFFLINE (CORRIGIDO)
if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
        navigator.serviceWorker.register('./sw.js')
            .then(registration => {
                console.log('‚úÖ SW registrado:', registration.scope);
            })
            .catch(error => {
                console.log('‚ùå SW falhou:', error);
            });
    });
}
